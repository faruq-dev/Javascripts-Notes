//Arrow (=>) function অবশ্যই function expression এর সাহায্যে লিখতে হয়।

// নরমাল function expression
const sum = function(a,b){
    return a*b;
};

const result = sum(5,6);
console.log(result);




//উপরের একই ফাংশন টা arrow function দিয়ে লেখার নিয়ম ******    *********    *********
{
    const sum = (a,b) => a + b;

    const result = sum(4,2); 
    console.log(result);
}
// arrow দিয়ে ফাংশন লিখলে "function" কীওয়ার্ড লেখার কোনো দরকার নেই, সরাসরি প্যারেন্থিসিস দিয়ে তার ভেতর প্যারামিটার দিয়ে দিলাম (a,b)

// এরপরেই দিতে হবে arrow (=>) চিহ্ন, তার ঠিক পরে ফাংশনের কোড ব্লক বা কাজটা লিখে দিতে হবে, আমি লিখলাম a + b, অর্থাৎ a ও b যোগ করো।

// যদি এটা ১ লাইনের কোড হয় তাহলে return কীওয়ার্ড দেওয়ারও কোনো দরকার নেই।

// এরপর sum কে অন্য একটা ভ্যারিয়েবলে স্টোর করে কনসোল করলে অথবা সরাসরি sum কে কনসোল করলেই a + b এর যোগফল প্রিন্ট হবে।

//এটা হলো সিঙ্গেল লাইন arrow function.



// multi-line বা একাধিক লাইনের arrow function লেখার নিয়ম ***** ********** *******
{
    const sum = (a,b) => {
        return a*b;
    };
    
    const result = sum(5,10); // এখানে (5, 10) যথাক্রমে a ও b প্যারামিটারের ভ্যালু হিসেবে গন্য হবে, a = 5 ও b = 10 হবে
    console.log(result);
}

// multi-line ও সিঙ্গেল লাইন প্রায় একই, তবে সামান্য পার্থক্য রয়েছেঃ

// ১- মাল্টি লাইন কোডে প্যারেন্থিসিস ব্রাকেটের () পর arrow (=>) এর পর কার্লি ব্রেস {} দিতে হবে, সেই কার্লি ব্রেসের ভেতর ফাংশনের কাজ/কোড ব্লক লিখতে হবে

// মাল্টি লাইন কোডে অবশ্যই return কীওয়ার্ড ইউজ করতে হবে। return এর মধ্যে যা করতে বলা হবে তা করে রেজাল্ট sum এর মধ্যে স্টোর হবে।

//আমি return a * b দিলাম, তাহলে a ও b কে গুন করে গুনফল রিটার্ন করবে

//এরপর যথারীতি sum কে অন্য একটা ভ্যারিয়েবলে স্টোর করে কনসোল করলে অথবা সরাসরি sum কে কনসোল করলেই a + b এর যোগফল প্রিন্ট হবে।