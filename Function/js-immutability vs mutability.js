//Primitive Data Type (Number, String, Boolean, Null, Undefined, etc)
let a = 10;
let b = a;

b = 12;

console.log(b);
console.log(a);

//Primitive data type হলো immmutable ডাটা টাইপ, অর্থাৎ সে তার পূর্বের ভ্যালুকে পরিবর্তন করেনা, উপরের উদাহরনের a = 10 কে b এর মধ্যে রাখা হলো b=a এভাবে, তাহলে কনসোল করলে a এর 10 মানটাই b এর মান হিসেবে শো করবে।

// কিন্ত b কে নতুন একটা ভ্যালু 12 এসাইন করলাম, এবার b কে কনসোল করলে ১২ দেখা যাবে, কিত্ন a কে কনসোল করলে ১০ ই দেখা যাবে, b = 12 হয়ে যাওয়ার ফলে কিন্ত a = 12 হয়নাই (৩ নং লাইনে b = a থাকা সত্বেও)।

// অর্থাৎ b কিন্ত a এর মানকে পরিবর্তন করছে না, অর্থাৎ primitive ডাটা টাইপ হলো immmutable (যাকে চেঞ্জ করা যায়না এমন)



//*************** */
//********* */

//Reference Data Type (Object, Array, etc)

const user = {
    userName: "Omar",
    passWord: 1243
} //এখানে আমরা একটা অবজেক্ট তৈরী করলাম user নামে, প্রতিটা অবজেক্ট তৈরী হওয়ার পর সে মেমরিতে একটা রেফারেন্স/মেমোরি এড্রেস তৈরী করে অবজেক্টের নামে।
console.log(user);

const person = user; //এবার person নামে নতুন একটা ভ্যারিয়েবল নিয়ে তাতে ভ্যালু হিসেবে user অবজেক্টকে রাখলাম, এর ফলে user ও person একই মেমরি এড্রেস বা রেফারেন্সের মধ্যে আছে। তাই এখন person কে কনসোল করলে যা আসবে, use কে কনসোল করলেও সেটাই আসবে।
console.log(person);

person.passWord = 7868; //যেহেতু এখন user অবজেক্টটা person এর ভেতরের আছে, এখন যদি person এর passWord চেঞ্জ করি person.passWord দিয়ে, তাহলে person কে কনসোল করলে দেখা যাবে পাসওয়ার্ড চেঞ্জ হয়ে 1243 থেকে 7868 হয়ে গেসে।
console.log(person);

console.log(user); //কিন্ত এবার user কে কনসোল করলে দেখা যাবে user এর পাসওয়ার্ডও চেঞ্জ হয়ে 1243 থেকে 7868 হয়ে গেসে, অর্থাৎ person কিন্ত user অবজেক্ট এর ভেতর থাকা প্রপার্টিকে চেঞ্জ করে ফেলতে পারছে। 

//অর্থাৎ এটা হলো mutable বা পরিবর্তনীয়, অর্থাৎ রেফারেন্স ডাটাটাইপ যেমন অ্যারে, অবজেক্ট এগুলা হলো mutable (পরিবর্তনীয়)

//নোটঃ ****
// Primitive Data Type হলো Immutable
// Reference/Object Data Type হলো mutable