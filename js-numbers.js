//********************* jaavaScript Numbers *********************

let num1 = 126536; //This is a integeer
let num2 = 12.598; //This is a floating number
let num3 = Number("120"); // Number মেথডের মাধ্যমে স্ট্রিং কে নাম্বারে কনভার্ট করা যায়

let num4 = 154e5; //এক্সপোনেনশিয়াল, এটার মাধ্যমে বড় নাম্বারকে শর্ট করে লেখা যায়, এখানে 154 এর পরে e5 মানে ১৫৪ এরপরে ৫টা শুন্য।
let num5 = 154e-5; //এটাও এক্সপোনেনশিয়াল, এখানে e-5 মানে ১৫৪ সংখ্যাটি দশমিকে কনভার্ট হবে
console.log(num5);

let jsNumberCount = 986959869856986; //javaScript ১৫ ডিজিট পর্যন্ত সংখ্যা ঠিকভাবে পড়তে পারে, ১৫ ডিজিটের বেশি হলে বিভিন্ন ইরর দেখায়
console.log(jsNumberCount);

let x = 0.2;
let y = 0.5;
let z = (x * 10 + y * 10) / 10; //দুইটা Floating নাম্বারের মধ্যে যদি কোন অ্যারিথমেটিক অপারেশন (যোগ-বিয়োগ-গুন-ভাগ) চালানো হয় তাহলে মাঝে মাঝে সঠিক রেজাল্ট আসেনা। এজন্য Floating number কে আগে Integer(পূর্ন সংখ্যা) তে কনভার্ট করে নিতে হয়। কনভার্ট করার নিয়ম হলো প্রতিটা Floating Number কে ১০ দিয়ে গুন করতে হবে (যেমনঃ x*10 ও y*10)। দুইটা Floating নাম্বারের গুনফলকে (+) করতে হবে [যেমন: (x*10)+(y*10)], এরপর সেই যোগফলকে ১০ দিয়ে ভাগ করতে হবে যেমনঃ ((x * 10) + (y * 10))/10;।

// উপোরক্ত মেথডটাই ফ্লোটিং নাম্বারের মধ্যে অ্যারিথমেটিক অপারেশন (যোগ-বিয়োগ-গুন-ভাগ) চালানোর জন্য ব্যবহার করতে হবে।
console.log(z);

//toString() method **** ***
/* কোনো নাম্বারকে বাইনারি, ডেসিমাল, হেক্সা ডেসিমাল, অক্টাল ইত্যাদি নাম্বারে কনভার্ট করার জন্য এই toString() মেথড ইউজ করা হয়। এছাড়া নরমাল নাম্বারকে স্ট্রিং এ কনভার্ট করার জন্যেও এই মেথড ব্যবহার করা হয় */

let number = 32;
console.log(number.toString(2)); //এখানে 32  এর বাইনারি রেজাল্ট পেতে হলে toString() এর ব্রাকেটে 2 লিখতে হবে
console.log(number.toString(8)); //এখানে 32  এর অক্টাল রেজাল্ট পেতে হলে toString() এর ব্রাকেটে 8 (আট) লিখতে হবে
console.log(number.toString(16)); //হেক্সা ডেসিমেল রেজাল্ট পেতে হলে toString() এর ব্রাকেটে 16 লিখতে হবে
console.log(number.toString()); // toString() এর ব্রাকেটে কিছু লেখা না হলে নরমাল নাম্বারকে স্ট্রিং এ কনভার্ট করবে

//toExponential method ***
//এই মেথডটা অবশ্যই একটা ডেসিমাল (দশমিক) সংখ্যা নিয়ে কাজ করে।
{
  let number = 9.656;
  console.log(number.toExponential(5)); // একটা ডেসিমেল নাম্বারকে যখন toExponential করা হলো তখন ডেসিমাল নাম্বারটি এক্সপোনেনশিয়াল নাম্বারে কনভার্ট হয়ে যাবে। (typeOf number.toExponential()) করা হলে এর ডাটা টাইপ স্ট্রিং আসবে।
  //toExponential এর ডানের ব্লূ ব্রাকেটে যদি 2 দেওয়া হয় তাহলে দশমিকের পর দুইটা সংখ্যা নি‍য়ে রেজাল্ট দেখাবে, যদি ৪ দেওয়া হয় তাহলে দশমিকের পর চারটা সংখ্যা নি‍য়ে রেজাল্ট দেখাবে।
}

//toFixed method ***
//দশমিকের পর কয়টা সংখ্যা নেওয়া হবে তা ফিক্সড করে দেওয়া যায় toFixed method এর মাধ্যমে।
{
  let a = 1.26896;
  console.log(a.toFixed(2)); //এখানে tofixed এর ডানের ব্লূ ব্র্যাকেটে যত সংখ্যা দেওয়া হবে দশমিকের পর ততগুলা সংখ্যা কনসোলে প্রিন্ট হবে। *** .toFixed() মেথড কিন্ত নাম্বারকে অটোমেটিক স্ট্রিং এ কনভার্ট করে ফেলে।
}

//toPrecision method ***
//দশমিকের আগে ও পরে সহ মোট কয়টা সংখ্যা নেওয়া হবে তা ফিক্সড করে দেওয়া যায় toPrecision method এর মাধ্যমে। toFixed method শুধু দশমিকের পরের সংখ্যা নিয়ে কাজ করে কিন্ত toPrecision method দশমিকের আগের ও পরের উভয় সংখ্যা কাউন্ট করে।
{
  let a = 1.26896;
  console.log(a.toPrecision(2)); //এখানে toPrecission এর ভ্যালু 2 দেওয়াতে দশমিকের আগের ১ ও দশমিকের পরে ২ এই দুইটা সংখ্যাকেই কনসোলে প্রিন্ট করবে।
}

//parseInt ***
{
  const a = "12.3658"; //parseInt দিলে স্ট্রিং এর ভেতরের শুধুমাত্র দশমিকের আগের সংখ্যা গুলো নিবে, যেমন ১২.৩৬৫৮ থেকে শুধু ১২ রিটার্ন করবে, মানে ফ্লোটিং নাম্বার কে integer এ কনভার্ট করে ফেলবে
  const b = parseInt(a);

  console.log(b);
}

//parseFloat
{
  const a = "12.3658";
  const b = parseFloat(a); //এটাও parseInt এর মতই কিন্ত এটা দশমিকের আগের ও পরের উভয় সংখ্যা নিয়েই কাজ করে।

  console.log(b);
  console.log(typeof b);
}
